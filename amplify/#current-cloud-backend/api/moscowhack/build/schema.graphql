type User {
  id: ID!
  name: String
  imageUri: String
  snils: String
  about: String
  phone: String!
  website: String
  email: String!
  competence: [String]
  company: String
  position: String
  startDateWork: String
  endDateWork: String
  responsibilities: [String]
  studyPlace: String
  specialization: String
  degree: String
  startDateStudy: String
  endDateStudy: String
  project: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Project {
  id: ID!
  branch: String!
  author: String!
  name: String!
  imageUri: String
  FIO: String!
  phone: String!
  email: String!
  team: [String]
  description: String
  advantage: String
  stage: String
  intellect: String
  problem: String
  marketUsage: String
  consumers: String
  competitors: String
  launchDate: String
  experience: String
  resources: String
  currentState: String
  model: String
  plan: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelUserFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  imageUri: ModelStringInput
  snils: ModelStringInput
  about: ModelStringInput
  phone: ModelStringInput
  website: ModelStringInput
  email: ModelStringInput
  competence: ModelStringInput
  company: ModelStringInput
  position: ModelStringInput
  startDateWork: ModelStringInput
  endDateWork: ModelStringInput
  responsibilities: ModelStringInput
  studyPlace: ModelStringInput
  specialization: ModelStringInput
  degree: ModelStringInput
  startDateStudy: ModelStringInput
  endDateStudy: ModelStringInput
  project: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

type Query {
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getProject(id: ID!): Project
  listProjects(filter: ModelProjectFilterInput, limit: Int, nextToken: String): ModelProjectConnection
}

input CreateUserInput {
  id: ID
  name: String
  imageUri: String
  snils: String
  about: String
  phone: String!
  website: String
  email: String!
  competence: [String]
  company: String
  position: String
  startDateWork: String
  endDateWork: String
  responsibilities: [String]
  studyPlace: String
  specialization: String
  degree: String
  startDateStudy: String
  endDateStudy: String
  project: String
}

input UpdateUserInput {
  id: ID!
  name: String
  imageUri: String
  snils: String
  about: String
  phone: String
  website: String
  email: String
  competence: [String]
  company: String
  position: String
  startDateWork: String
  endDateWork: String
  responsibilities: [String]
  studyPlace: String
  specialization: String
  degree: String
  startDateStudy: String
  endDateStudy: String
  project: String
}

input DeleteUserInput {
  id: ID!
}

type Mutation {
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User
  createProject(input: CreateProjectInput!, condition: ModelProjectConditionInput): Project
  updateProject(input: UpdateProjectInput!, condition: ModelProjectConditionInput): Project
  deleteProject(input: DeleteProjectInput!, condition: ModelProjectConditionInput): Project
}

input ModelUserConditionInput {
  name: ModelStringInput
  imageUri: ModelStringInput
  snils: ModelStringInput
  about: ModelStringInput
  phone: ModelStringInput
  website: ModelStringInput
  email: ModelStringInput
  competence: ModelStringInput
  company: ModelStringInput
  position: ModelStringInput
  startDateWork: ModelStringInput
  endDateWork: ModelStringInput
  responsibilities: ModelStringInput
  studyPlace: ModelStringInput
  specialization: ModelStringInput
  degree: ModelStringInput
  startDateStudy: ModelStringInput
  endDateStudy: ModelStringInput
  project: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

type Subscription {
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateProject: Project @aws_subscribe(mutations: ["createProject"])
  onUpdateProject: Project @aws_subscribe(mutations: ["updateProject"])
  onDeleteProject: Project @aws_subscribe(mutations: ["deleteProject"])
}

type ModelProjectConnection {
  items: [Project]
  nextToken: String
}

input ModelProjectFilterInput {
  id: ModelIDInput
  branch: ModelStringInput
  author: ModelStringInput
  name: ModelStringInput
  imageUri: ModelStringInput
  FIO: ModelStringInput
  phone: ModelStringInput
  email: ModelStringInput
  team: ModelStringInput
  description: ModelStringInput
  advantage: ModelStringInput
  stage: ModelStringInput
  intellect: ModelStringInput
  problem: ModelStringInput
  marketUsage: ModelStringInput
  consumers: ModelStringInput
  competitors: ModelStringInput
  launchDate: ModelStringInput
  experience: ModelStringInput
  resources: ModelStringInput
  currentState: ModelStringInput
  model: ModelStringInput
  plan: ModelStringInput
  and: [ModelProjectFilterInput]
  or: [ModelProjectFilterInput]
  not: ModelProjectFilterInput
}

input CreateProjectInput {
  id: ID
  branch: String!
  author: String!
  name: String!
  imageUri: String
  FIO: String!
  phone: String!
  email: String!
  team: [String]
  description: String
  advantage: String
  stage: String
  intellect: String
  problem: String
  marketUsage: String
  consumers: String
  competitors: String
  launchDate: String
  experience: String
  resources: String
  currentState: String
  model: String
  plan: String
}

input UpdateProjectInput {
  id: ID!
  branch: String
  author: String
  name: String
  imageUri: String
  FIO: String
  phone: String
  email: String
  team: [String]
  description: String
  advantage: String
  stage: String
  intellect: String
  problem: String
  marketUsage: String
  consumers: String
  competitors: String
  launchDate: String
  experience: String
  resources: String
  currentState: String
  model: String
  plan: String
}

input DeleteProjectInput {
  id: ID!
}

input ModelProjectConditionInput {
  branch: ModelStringInput
  author: ModelStringInput
  name: ModelStringInput
  imageUri: ModelStringInput
  FIO: ModelStringInput
  phone: ModelStringInput
  email: ModelStringInput
  team: ModelStringInput
  description: ModelStringInput
  advantage: ModelStringInput
  stage: ModelStringInput
  intellect: ModelStringInput
  problem: ModelStringInput
  marketUsage: ModelStringInput
  consumers: ModelStringInput
  competitors: ModelStringInput
  launchDate: ModelStringInput
  experience: ModelStringInput
  resources: ModelStringInput
  currentState: ModelStringInput
  model: ModelStringInput
  plan: ModelStringInput
  and: [ModelProjectConditionInput]
  or: [ModelProjectConditionInput]
  not: ModelProjectConditionInput
}
